import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, a as space, b as attr, m as toggle_class, c as insert, d as append, l as listen, j as set_data, n as noop, f as detach, r as run_all, g as component_subscribe, o as locale, k as t, p as onMount, q as set_store_value, u as create_component, v as mount_component, w as transition_in, x as transition_out, y as destroy_component, h as set_input_value } from './i18n-b2e39bd5.js';

/* src\common\LanguageSwitch.svelte generated by Svelte v3.59.2 */

function create_fragment$1(ctx) {
	let div;
	let button0;
	let t0_value = (/*$t*/ ctx[1].languageSwitch?.spanish || "ESP") + "";
	let t0;
	let button0_aria_label_value;
	let t1;
	let button1;
	let t2_value = (/*$t*/ ctx[1].languageSwitch?.english || "ENG") + "";
	let t2;
	let button1_aria_label_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			button1 = element("button");
			t2 = text(t2_value);
			attr(button0, "class", "language-button svelte-1hgnvtf");
			attr(button0, "aria-label", button0_aria_label_value = /*$t*/ ctx[1].languageSwitch?.spanishLabel || "Switch to Spanish");
			toggle_class(button0, "active", /*$locale*/ ctx[0] === 'es');
			attr(button1, "class", "language-button svelte-1hgnvtf");
			attr(button1, "aria-label", button1_aria_label_value = /*$t*/ ctx[1].languageSwitch?.englishLabel || "Switch to English");
			toggle_class(button1, "active", /*$locale*/ ctx[0] === 'en');
			attr(div, "class", "language-switch svelte-1hgnvtf");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t0);
			append(div, t1);
			append(div, button1);
			append(button1, t2);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[3]),
					listen(button1, "click", /*click_handler_1*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*$t*/ 2 && t0_value !== (t0_value = (/*$t*/ ctx[1].languageSwitch?.spanish || "ESP") + "")) set_data(t0, t0_value);

			if (dirty & /*$t*/ 2 && button0_aria_label_value !== (button0_aria_label_value = /*$t*/ ctx[1].languageSwitch?.spanishLabel || "Switch to Spanish")) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (dirty & /*$locale*/ 1) {
				toggle_class(button0, "active", /*$locale*/ ctx[0] === 'es');
			}

			if (dirty & /*$t*/ 2 && t2_value !== (t2_value = (/*$t*/ ctx[1].languageSwitch?.english || "ENG") + "")) set_data(t2, t2_value);

			if (dirty & /*$t*/ 2 && button1_aria_label_value !== (button1_aria_label_value = /*$t*/ ctx[1].languageSwitch?.englishLabel || "Switch to English")) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (dirty & /*$locale*/ 1) {
				toggle_class(button1, "active", /*$locale*/ ctx[0] === 'en');
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $locale;
	let $t;
	component_subscribe($$self, locale, $$value => $$invalidate(0, $locale = $$value));
	component_subscribe($$self, t, $$value => $$invalidate(1, $t = $$value));

	onMount(() => {
		// Initialize with the stored locale
		localStorage.getItem('locale') || 'en';
	});

	function setLanguage(lang) {
		set_store_value(locale, $locale = lang, $locale);
	}

	const click_handler = () => setLanguage('es');
	const click_handler_1 = () => setLanguage('en');
	return [$locale, $t, setLanguage, click_handler, click_handler_1];
}

class LanguageSwitch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

/* src\auth\Register.svelte generated by Svelte v3.59.2 */

function create_else_block(ctx) {
	let h1;
	let t0_value = (/*$t*/ ctx[12].register?.title || "Join Us!") + "";
	let t0;
	let t1;
	let form;
	let input0;
	let input0_placeholder_value;
	let t2;
	let input1;
	let input1_placeholder_value;
	let t3;
	let input2;
	let input2_placeholder_value;
	let t4;
	let input3;
	let input3_placeholder_value;
	let t5;
	let input4;
	let input4_placeholder_value;
	let t6;
	let p;
	let t7_value = (/*$t*/ ctx[12].register?.optionalFieldsDescription || "Add your phone number or Instagram handle so we can help you personally.") + "";
	let t7;
	let t8;
	let input5;
	let input5_placeholder_value;
	let t9;
	let input6;
	let input6_placeholder_value;
	let t10;
	let div;
	let input7;
	let t11;
	let label;
	let raw_value = (/*$t*/ ctx[12].register?.combinedConsentLabel || "I agree to the <a href='/privacy-policy' target='_blank'>Privacy Policy</a>, <a href='/terms-of-service' target='_blank'>Terms of Service</a>, by accepting, I also consent to temporary video storage as described (necessary for the service) in the <a href='/privacy-policy#video-storage' target='_blank'>Video Storage Policy</a>.") + "";
	let t12;
	let t13;
	let button;
	let t14_value = (/*$t*/ ctx[12].register?.submitButton || "Register with Email â†’") + "";
	let t14;
	let mounted;
	let dispose;
	let if_block = /*errorMessage*/ ctx[8] && create_if_block_1(ctx);

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			form = element("form");
			input0 = element("input");
			t2 = space();
			input1 = element("input");
			t3 = space();
			input2 = element("input");
			t4 = space();
			input3 = element("input");
			t5 = space();
			input4 = element("input");
			t6 = space();
			p = element("p");
			t7 = text(t7_value);
			t8 = space();
			input5 = element("input");
			t9 = space();
			input6 = element("input");
			t10 = space();
			div = element("div");
			input7 = element("input");
			t11 = space();
			label = element("label");
			t12 = space();
			if (if_block) if_block.c();
			t13 = space();
			button = element("button");
			t14 = text(t14_value);
			attr(h1, "class", "svelte-9o01bn");
			attr(input0, "type", "text");
			attr(input0, "id", "firstName");
			attr(input0, "placeholder", input0_placeholder_value = /*$t*/ ctx[12].register?.firstName || "First Name");
			input0.required = true;
			attr(input0, "class", "svelte-9o01bn");
			attr(input1, "type", "text");
			attr(input1, "id", "lastName");
			attr(input1, "placeholder", input1_placeholder_value = /*$t*/ ctx[12].register?.lastName || "Last Name");
			input1.required = true;
			attr(input1, "class", "svelte-9o01bn");
			attr(input2, "type", "email");
			attr(input2, "id", "email");
			attr(input2, "placeholder", input2_placeholder_value = /*$t*/ ctx[12].register?.email || "Email");
			input2.required = true;
			attr(input2, "class", "svelte-9o01bn");
			attr(input3, "type", "password");
			attr(input3, "id", "password");
			attr(input3, "placeholder", input3_placeholder_value = /*$t*/ ctx[12].register?.password || "Password");
			input3.required = true;
			attr(input3, "class", "svelte-9o01bn");
			attr(input4, "type", "password");
			attr(input4, "id", "repeatPassword");
			attr(input4, "placeholder", input4_placeholder_value = /*$t*/ ctx[12].register?.repeatPassword || "Repeat Password");
			input4.required = true;
			attr(input4, "class", "svelte-9o01bn");
			attr(p, "class", "optional-fields-description svelte-9o01bn");
			attr(input5, "type", "tel");
			attr(input5, "id", "phoneNumber");
			attr(input5, "placeholder", input5_placeholder_value = /*$t*/ ctx[12].register?.phoneNumber || "Phone Number (optional)");
			attr(input5, "class", "svelte-9o01bn");
			attr(input6, "type", "text");
			attr(input6, "id", "instagramHandle");
			attr(input6, "placeholder", input6_placeholder_value = /*$t*/ ctx[12].register?.instagramHandle || "Instagram Handle (optional)");
			attr(input6, "class", "svelte-9o01bn");
			attr(input7, "type", "checkbox");
			attr(input7, "id", "consent");
			input7.required = true;
			attr(input7, "class", "svelte-9o01bn");
			attr(label, "for", "consent");
			attr(label, "class", "svelte-9o01bn");
			attr(div, "class", "consent-checkbox svelte-9o01bn");
			attr(button, "type", "submit");
			attr(button, "class", "svelte-9o01bn");
			attr(form, "class", "svelte-9o01bn");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, form, anchor);
			append(form, input0);
			set_input_value(input0, /*firstName*/ ctx[3]);
			append(form, t2);
			append(form, input1);
			set_input_value(input1, /*lastName*/ ctx[4]);
			append(form, t3);
			append(form, input2);
			set_input_value(input2, /*email*/ ctx[5]);
			append(form, t4);
			append(form, input3);
			set_input_value(input3, /*password*/ ctx[6]);
			append(form, t5);
			append(form, input4);
			set_input_value(input4, /*repeatPassword*/ ctx[7]);
			append(form, t6);
			append(form, p);
			append(p, t7);
			append(form, t8);
			append(form, input5);
			set_input_value(input5, /*phoneNumber*/ ctx[10]);
			append(form, t9);
			append(form, input6);
			set_input_value(input6, /*instagramHandle*/ ctx[11]);
			append(form, t10);
			append(form, div);
			append(div, input7);
			input7.checked = /*consentGiven*/ ctx[9];
			append(div, t11);
			append(div, label);
			label.innerHTML = raw_value;
			append(form, t12);
			if (if_block) if_block.m(form, null);
			append(form, t13);
			append(form, button);
			append(button, t14);

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[17]),
					listen(input1, "input", /*input1_input_handler*/ ctx[18]),
					listen(input2, "input", /*input2_input_handler*/ ctx[19]),
					listen(input3, "input", /*input3_input_handler*/ ctx[20]),
					listen(input4, "input", /*input4_input_handler*/ ctx[21]),
					listen(input5, "input", /*input5_input_handler*/ ctx[22]),
					listen(input6, "input", /*input6_input_handler*/ ctx[23]),
					listen(input7, "change", /*input7_change_handler*/ ctx[24]),
					listen(form, "submit", /*handleSubmit*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 4096 && t0_value !== (t0_value = (/*$t*/ ctx[12].register?.title || "Join Us!") + "")) set_data(t0, t0_value);

			if (dirty & /*$t*/ 4096 && input0_placeholder_value !== (input0_placeholder_value = /*$t*/ ctx[12].register?.firstName || "First Name")) {
				attr(input0, "placeholder", input0_placeholder_value);
			}

			if (dirty & /*firstName*/ 8 && input0.value !== /*firstName*/ ctx[3]) {
				set_input_value(input0, /*firstName*/ ctx[3]);
			}

			if (dirty & /*$t*/ 4096 && input1_placeholder_value !== (input1_placeholder_value = /*$t*/ ctx[12].register?.lastName || "Last Name")) {
				attr(input1, "placeholder", input1_placeholder_value);
			}

			if (dirty & /*lastName*/ 16 && input1.value !== /*lastName*/ ctx[4]) {
				set_input_value(input1, /*lastName*/ ctx[4]);
			}

			if (dirty & /*$t*/ 4096 && input2_placeholder_value !== (input2_placeholder_value = /*$t*/ ctx[12].register?.email || "Email")) {
				attr(input2, "placeholder", input2_placeholder_value);
			}

			if (dirty & /*email*/ 32 && input2.value !== /*email*/ ctx[5]) {
				set_input_value(input2, /*email*/ ctx[5]);
			}

			if (dirty & /*$t*/ 4096 && input3_placeholder_value !== (input3_placeholder_value = /*$t*/ ctx[12].register?.password || "Password")) {
				attr(input3, "placeholder", input3_placeholder_value);
			}

			if (dirty & /*password*/ 64 && input3.value !== /*password*/ ctx[6]) {
				set_input_value(input3, /*password*/ ctx[6]);
			}

			if (dirty & /*$t*/ 4096 && input4_placeholder_value !== (input4_placeholder_value = /*$t*/ ctx[12].register?.repeatPassword || "Repeat Password")) {
				attr(input4, "placeholder", input4_placeholder_value);
			}

			if (dirty & /*repeatPassword*/ 128 && input4.value !== /*repeatPassword*/ ctx[7]) {
				set_input_value(input4, /*repeatPassword*/ ctx[7]);
			}

			if (dirty & /*$t*/ 4096 && t7_value !== (t7_value = (/*$t*/ ctx[12].register?.optionalFieldsDescription || "Add your phone number or Instagram handle so we can help you personally.") + "")) set_data(t7, t7_value);

			if (dirty & /*$t*/ 4096 && input5_placeholder_value !== (input5_placeholder_value = /*$t*/ ctx[12].register?.phoneNumber || "Phone Number (optional)")) {
				attr(input5, "placeholder", input5_placeholder_value);
			}

			if (dirty & /*phoneNumber*/ 1024) {
				set_input_value(input5, /*phoneNumber*/ ctx[10]);
			}

			if (dirty & /*$t*/ 4096 && input6_placeholder_value !== (input6_placeholder_value = /*$t*/ ctx[12].register?.instagramHandle || "Instagram Handle (optional)")) {
				attr(input6, "placeholder", input6_placeholder_value);
			}

			if (dirty & /*instagramHandle*/ 2048 && input6.value !== /*instagramHandle*/ ctx[11]) {
				set_input_value(input6, /*instagramHandle*/ ctx[11]);
			}

			if (dirty & /*consentGiven*/ 512) {
				input7.checked = /*consentGiven*/ ctx[9];
			}

			if (dirty & /*$t*/ 4096 && raw_value !== (raw_value = (/*$t*/ ctx[12].register?.combinedConsentLabel || "I agree to the <a href='/privacy-policy' target='_blank'>Privacy Policy</a>, <a href='/terms-of-service' target='_blank'>Terms of Service</a>, by accepting, I also consent to temporary video storage as described (necessary for the service) in the <a href='/privacy-policy#video-storage' target='_blank'>Video Storage Policy</a>.") + "")) label.innerHTML = raw_value;
			if (/*errorMessage*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(form, t13);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*$t*/ 4096 && t14_value !== (t14_value = (/*$t*/ ctx[12].register?.submitButton || "Register with Email â†’") + "")) set_data(t14, t14_value);
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(form);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (200:8) {#if isAuthenticated && (subscriptionStatus === 'ACTIVE' || subscriptionStatus === 'CANCELLED')}
function create_if_block(ctx) {
	let h1;
	let t0_value = (/*$t*/ ctx[12].register?.alreadyRegistered || 'You are already registered') + "";
	let t0;
	let t1;
	let p;
	let t2_value = (/*$t*/ ctx[12].register?.loggedInAs || 'You are logged in as') + "";
	let t2;
	let t3;
	let strong;
	let t4;
	let t5;
	let div;
	let button0;
	let t6_value = (/*$t*/ ctx[12].register?.continueButton || 'Continue to Dashboard â†’') + "";
	let t6;
	let t7;
	let button1;
	let t8_value = (/*$t*/ ctx[12].register?.logoutButton || 'Logout') + "";
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			strong = element("strong");
			t4 = text(/*authenticatedEmail*/ ctx[1]);
			t5 = space();
			div = element("div");
			button0 = element("button");
			t6 = text(t6_value);
			t7 = space();
			button1 = element("button");
			t8 = text(t8_value);
			attr(h1, "class", "svelte-9o01bn");
			attr(button0, "class", "continue-btn svelte-9o01bn");
			attr(button1, "class", "logout-btn svelte-9o01bn");
			attr(div, "class", "button-container svelte-9o01bn");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
			append(p, t3);
			append(p, strong);
			append(strong, t4);
			insert(target, t5, anchor);
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t6);
			append(div, t7);
			append(div, button1);
			append(button1, t8);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[16]),
					listen(button1, "click", /*handleLogout*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 4096 && t0_value !== (t0_value = (/*$t*/ ctx[12].register?.alreadyRegistered || 'You are already registered') + "")) set_data(t0, t0_value);
			if (dirty & /*$t*/ 4096 && t2_value !== (t2_value = (/*$t*/ ctx[12].register?.loggedInAs || 'You are logged in as') + "")) set_data(t2, t2_value);
			if (dirty & /*authenticatedEmail*/ 2) set_data(t4, /*authenticatedEmail*/ ctx[1]);
			if (dirty & /*$t*/ 4096 && t6_value !== (t6_value = (/*$t*/ ctx[12].register?.continueButton || 'Continue to Dashboard â†’') + "")) set_data(t6, t6_value);
			if (dirty & /*$t*/ 4096 && t8_value !== (t8_value = (/*$t*/ ctx[12].register?.logoutButton || 'Logout') + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if (detaching) detach(t5);
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (231:16) {#if errorMessage}
function create_if_block_1(ctx) {
	let p;
	let t_1;

	return {
		c() {
			p = element("p");
			t_1 = text(/*errorMessage*/ ctx[8]);
			attr(p, "class", "error-message svelte-9o01bn");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t_1);
		},
		p(ctx, dirty) {
			if (dirty & /*errorMessage*/ 256) set_data(t_1, /*errorMessage*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let div0;
	let languageswitch;
	let t0;
	let div2;
	let div1;
	let t1;
	let p;
	let raw_value = (/*$t*/ ctx[12].register?.alreadyHaveAccount || "Already have an account? <a href=\"/api/login\">Click here to log in</a>.") + "";
	let t2;
	let div3;
	let current;
	let mounted;
	let dispose;
	languageswitch = new LanguageSwitch({});

	function select_block_type(ctx, dirty) {
		if (/*isAuthenticated*/ ctx[0] && (/*subscriptionStatus*/ ctx[2] === 'ACTIVE' || /*subscriptionStatus*/ ctx[2] === 'CANCELLED')) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			main = element("main");
			div0 = element("div");
			create_component(languageswitch.$$.fragment);
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div1.innerHTML = `<img src="/static/icons/YekarLogo.svg" alt="Yekar-Logo" class="svelte-9o01bn"/>`;
			t1 = space();
			p = element("p");
			t2 = space();
			div3 = element("div");
			if_block.c();
			attr(div0, "class", "language-switch-container svelte-9o01bn");
			attr(div1, "class", "logo-container svelte-9o01bn");
			attr(div1, "tabindex", "0");
			attr(div1, "role", "button");
			attr(p, "class", "svelte-9o01bn");
			attr(div2, "class", "left-panel svelte-9o01bn");
			attr(div3, "class", "right-panel svelte-9o01bn");
			attr(main, "class", "svelte-9o01bn");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, div0);
			mount_component(languageswitch, div0, null);
			append(main, t0);
			append(main, div2);
			append(div2, div1);
			append(div2, t1);
			append(div2, p);
			p.innerHTML = raw_value;
			append(main, t2);
			append(main, div3);
			if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", handleLogoClick),
					listen(div1, "keydown", /*keydown_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$t*/ 4096) && raw_value !== (raw_value = (/*$t*/ ctx[12].register?.alreadyHaveAccount || "Already have an account? <a href=\"/api/login\">Click here to log in</a>.") + "")) p.innerHTML = raw_value;
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div3, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(languageswitch.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(languageswitch.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(languageswitch);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

let productType = 'monthly';
let videoConsentGiven = false;

// Function to get cookie by name
function getCookie(name) {
	const value = `; ${document.cookie}`;
	const parts = value.split(`; ${name}=`);
	if (parts.length === 2) return parts.pop()?.split(';').shift() || null;
	return null;
}

// Function to set cookie
function setCookie(name, value, days = 1) {
	const date = new Date();
	date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
	const expires = `expires=${date.toUTCString()}`;
	document.cookie = `${name}=${value};${expires};path=/`;
}

function handleLogoClick() {
	window.location.href = "/landing";
}

function instance($$self, $$props, $$invalidate) {
	let $t;
	component_subscribe($$self, t, $$value => $$invalidate(12, $t = $$value));
	let isAuthenticated = false;
	let authenticatedEmail = '';
	let subscriptionStatus = '';
	let firstName = '';
	let lastName = '';
	let email = '';
	let password = '';
	let repeatPassword = '';
	let errorMessage = '';
	let consentGiven = false;
	let phoneNumber = '';
	let instagramHandle = '';
	let affiliateCode = '';
	let stripePublishableKey = '';
	let stripe = null;

	const getStripeKey = async () => {
		const response = await fetch('/api/stripe-key/');
		const data = await response.json();
		stripePublishableKey = data.stripe_publishable_key;

		// Use the global Stripe object
		stripe = window.Stripe(stripePublishableKey, {
			scriptLoadOptions: { crossorigin: 'anonymous' }
		});

		console.log('Stripe initialized:', stripe);
	};

	const checkAuthStatus = async () => {
		try {
			const response = await fetch('/api/auth-status/');
			const data = await response.json();
			console.log('Auth status response:', data);

			if (response.ok && data.is_authenticated) {
				$$invalidate(0, isAuthenticated = true);
				$$invalidate(1, authenticatedEmail = data.email);
				$$invalidate(2, subscriptionStatus = data.subscription_status);

				if (subscriptionStatus === 'EXPIRED' || subscriptionStatus === 'INACTIVE') {
					window.location.href = '/account-settings';
				}
			} else {
				$$invalidate(0, isAuthenticated = false);
			}
		} catch(error) {
			console.error('Error checking auth status:', error);
		}
	};

	onMount(async () => {
		await checkAuthStatus();

		if (!isAuthenticated) {
			await getStripeKey();

			// Check URL for affiliate code first
			const urlParams = new URLSearchParams(window.location.search);

			const urlAffiliateCode = urlParams.get('ref');

			if (urlAffiliateCode) {
				// If found in URL, update cookie
				setCookie('affiliate_code', urlAffiliateCode);

				affiliateCode = urlAffiliateCode;
				console.log('Affiliate code from URL stored in cookie:', affiliateCode);
			} else {
				// If not in URL, check cookie
				const cookieAffiliateCode = getCookie('affiliate_code');

				if (cookieAffiliateCode) {
					affiliateCode = cookieAffiliateCode;
					console.log('Affiliate code found in cookie:', affiliateCode);
				}
			}
		}
	});

	const handleSubmit = async event => {
		event.preventDefault();

		if (!consentGiven) {
			$$invalidate(8, errorMessage = $t.register?.consentError || 'You must agree to our policies to register.');
			return;
		}

		if (password !== repeatPassword) {
			$$invalidate(8, errorMessage = $t.register?.errors?.passwordsDoNotMatch || 'Passwords do not match.');
			return;
		}

		try {
			const csrfTokenElement = document.querySelector('meta[name="csrf-token"]');

			if (!csrfTokenElement) {
				throw new Error('CSRF token not found');
			}

			const csrfToken = csrfTokenElement.getAttribute('content');

			if (!csrfToken) {
				throw new Error('CSRF token is empty');
			}

			// Get affiliate code from cookie if not already set
			if (!affiliateCode) {
				affiliateCode = getCookie('affiliate_code') || '';
			}

			const response = await fetch('/api/register/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				},
				body: JSON.stringify({
					first_name: firstName,
					last_name: lastName,
					email,
					password,
					product_type: productType,
					consent_given: consentGiven,
					video_consent_given: videoConsentGiven,
					phone_number: phoneNumber,
					instagram_handle: instagramHandle,
					affiliate_code: affiliateCode
				})
			});

			if (!response.ok) {
				const errorData = await response.json();
				throw new Error(errorData.message || 'Registration failed');
			}

			const data = await response.json();
			console.log('Registration successful:', data);

			// Clear affiliate cookie after successful registration
			document.cookie = 'affiliate_code=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';

			// Redirect to Stripe checkout page using sessionId
			stripe.redirectToCheckout({ sessionId: data.sessionId });
		} catch(error) {
			console.error('Registration error:', error);

			if (error instanceof Error) {
				$$invalidate(8, errorMessage = error.message || $t.register?.errors?.registrationFailed || 'Registration failed');
			} else {
				$$invalidate(8, errorMessage = $t.register?.errors?.unknownError || 'An unknown error occurred');
			}
		}
	};

	const handleLogout = async () => {
		try {
			const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

			const response = await fetch('/api/logout/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				}
			});

			if (response.ok) {
				window.location.reload();
			}
		} catch(error) {
			console.error('Logout error:', error);
		}
	};

	const keydown_handler = e => e.key === 'Enter' && handleLogoClick();
	const click_handler = () => window.location.href = '/dashboard';

	function input0_input_handler() {
		firstName = this.value;
		$$invalidate(3, firstName);
	}

	function input1_input_handler() {
		lastName = this.value;
		$$invalidate(4, lastName);
	}

	function input2_input_handler() {
		email = this.value;
		$$invalidate(5, email);
	}

	function input3_input_handler() {
		password = this.value;
		$$invalidate(6, password);
	}

	function input4_input_handler() {
		repeatPassword = this.value;
		$$invalidate(7, repeatPassword);
	}

	function input5_input_handler() {
		phoneNumber = this.value;
		$$invalidate(10, phoneNumber);
	}

	function input6_input_handler() {
		instagramHandle = this.value;
		$$invalidate(11, instagramHandle);
	}

	function input7_change_handler() {
		consentGiven = this.checked;
		$$invalidate(9, consentGiven);
	}

	return [
		isAuthenticated,
		authenticatedEmail,
		subscriptionStatus,
		firstName,
		lastName,
		email,
		password,
		repeatPassword,
		errorMessage,
		consentGiven,
		phoneNumber,
		instagramHandle,
		$t,
		handleSubmit,
		handleLogout,
		keydown_handler,
		click_handler,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler,
		input4_input_handler,
		input5_input_handler,
		input6_input_handler,
		input7_change_handler
	];
}

class Register extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

new Register({
    target: document.body,
});
//# sourceMappingURL=register.js.map
