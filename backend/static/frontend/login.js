import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, a as space, b as attr, c as insert, d as append, n as noop, f as detach, g as component_subscribe, t as text, h as set_input_value, l as listen, j as set_data, r as run_all, k as t } from './i18n-b2e39bd5.js';

/* src\auth\Login.svelte generated by Svelte v3.59.2 */

function create_else_block(ctx) {
	let h1;
	let t0_value = (/*$t*/ ctx[6].login?.title || 'Welcome Back!') + "";
	let t0;
	let t1;
	let form;
	let input0;
	let input0_placeholder_value;
	let t2;
	let input1;
	let input1_placeholder_value;
	let t3;
	let t4;
	let button;
	let t5_value = (/*$t*/ ctx[6].login?.submitButton || 'Log In →') + "";
	let t5;
	let t6;
	let p;
	let raw_value = (/*$t*/ ctx[6].login?.noAccount || "Don't have an account? <a href='/api/register'>Click here to register</a>.") + "";
	let mounted;
	let dispose;
	let if_block = /*errorMessage*/ ctx[2] && create_if_block_1(ctx);

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			form = element("form");
			input0 = element("input");
			t2 = space();
			input1 = element("input");
			t3 = space();
			if (if_block) if_block.c();
			t4 = space();
			button = element("button");
			t5 = text(t5_value);
			t6 = space();
			p = element("p");
			attr(h1, "class", "svelte-1038yqc");
			attr(input0, "type", "email");
			attr(input0, "id", "email");
			attr(input0, "placeholder", input0_placeholder_value = /*$t*/ ctx[6].login?.email || 'Email');
			input0.required = true;
			attr(input0, "class", "svelte-1038yqc");
			attr(input1, "type", "password");
			attr(input1, "id", "password");
			attr(input1, "placeholder", input1_placeholder_value = /*$t*/ ctx[6].login?.password || 'Password');
			input1.required = true;
			attr(input1, "class", "svelte-1038yqc");
			attr(button, "type", "submit");
			attr(button, "class", "svelte-1038yqc");
			attr(form, "class", "svelte-1038yqc");
			attr(p, "class", "svelte-1038yqc");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, form, anchor);
			append(form, input0);
			set_input_value(input0, /*email*/ ctx[0]);
			append(form, t2);
			append(form, input1);
			set_input_value(input1, /*password*/ ctx[1]);
			append(form, t3);
			if (if_block) if_block.m(form, null);
			append(form, t4);
			append(form, button);
			append(button, t5);
			insert(target, t6, anchor);
			insert(target, p, anchor);
			p.innerHTML = raw_value;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[10]),
					listen(input1, "input", /*input1_input_handler*/ ctx[11]),
					listen(form, "submit", /*handleSubmit*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 64 && t0_value !== (t0_value = (/*$t*/ ctx[6].login?.title || 'Welcome Back!') + "")) set_data(t0, t0_value);

			if (dirty & /*$t*/ 64 && input0_placeholder_value !== (input0_placeholder_value = /*$t*/ ctx[6].login?.email || 'Email')) {
				attr(input0, "placeholder", input0_placeholder_value);
			}

			if (dirty & /*email*/ 1 && input0.value !== /*email*/ ctx[0]) {
				set_input_value(input0, /*email*/ ctx[0]);
			}

			if (dirty & /*$t*/ 64 && input1_placeholder_value !== (input1_placeholder_value = /*$t*/ ctx[6].login?.password || 'Password')) {
				attr(input1, "placeholder", input1_placeholder_value);
			}

			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
				set_input_value(input1, /*password*/ ctx[1]);
			}

			if (/*errorMessage*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(form, t4);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*$t*/ 64 && t5_value !== (t5_value = (/*$t*/ ctx[6].login?.submitButton || 'Log In →') + "")) set_data(t5, t5_value);
			if (dirty & /*$t*/ 64 && raw_value !== (raw_value = (/*$t*/ ctx[6].login?.noAccount || "Don't have an account? <a href='/api/register'>Click here to register</a>.") + "")) p.innerHTML = raw_value;		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(form);
			if (if_block) if_block.d();
			if (detaching) detach(t6);
			if (detaching) detach(p);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (91:8) {#if isAuthenticated && (subscriptionStatus === 'ACTIVE' || subscriptionStatus === 'CANCELLED')}
function create_if_block(ctx) {
	let h1;
	let t0_value = (/*$t*/ ctx[6].login?.alreadyLoggedIn || 'You are already logged in') + "";
	let t0;
	let t1;
	let p;
	let t2_value = (/*$t*/ ctx[6].login?.loggedInAs || 'You are logged in as') + "";
	let t2;
	let t3;
	let strong;
	let t4;
	let t5;
	let div;
	let button0;
	let t6_value = (/*$t*/ ctx[6].login?.continueButton || 'Continue →') + "";
	let t6;
	let t7;
	let button1;
	let t8_value = (/*$t*/ ctx[6].login?.logoutButton || 'Logout') + "";
	let t8;
	let mounted;
	let dispose;

	return {
		c() {
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();
			strong = element("strong");
			t4 = text(/*authenticatedEmail*/ ctx[4]);
			t5 = space();
			div = element("div");
			button0 = element("button");
			t6 = text(t6_value);
			t7 = space();
			button1 = element("button");
			t8 = text(t8_value);
			attr(h1, "class", "svelte-1038yqc");
			attr(p, "class", "svelte-1038yqc");
			attr(button0, "class", "continue-btn svelte-1038yqc");
			attr(button1, "class", "logout-btn svelte-1038yqc");
			attr(div, "class", "button-container svelte-1038yqc");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			append(p, t2);
			append(p, t3);
			append(p, strong);
			append(strong, t4);
			insert(target, t5, anchor);
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t6);
			append(div, t7);
			append(div, button1);
			append(button1, t8);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[9]),
					listen(button1, "click", /*handleLogout*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 64 && t0_value !== (t0_value = (/*$t*/ ctx[6].login?.alreadyLoggedIn || 'You are already logged in') + "")) set_data(t0, t0_value);
			if (dirty & /*$t*/ 64 && t2_value !== (t2_value = (/*$t*/ ctx[6].login?.loggedInAs || 'You are logged in as') + "")) set_data(t2, t2_value);
			if (dirty & /*authenticatedEmail*/ 16) set_data(t4, /*authenticatedEmail*/ ctx[4]);
			if (dirty & /*$t*/ 64 && t6_value !== (t6_value = (/*$t*/ ctx[6].login?.continueButton || 'Continue →') + "")) set_data(t6, t6_value);
			if (dirty & /*$t*/ 64 && t8_value !== (t8_value = (/*$t*/ ctx[6].login?.logoutButton || 'Logout') + "")) set_data(t8, t8_value);
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if (detaching) detach(t5);
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (108:16) {#if errorMessage}
function create_if_block_1(ctx) {
	let p;
	let t_1;

	return {
		c() {
			p = element("p");
			t_1 = text(/*errorMessage*/ ctx[2]);
			attr(p, "class", "error-message svelte-1038yqc");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t_1);
		},
		p(ctx, dirty) {
			if (dirty & /*errorMessage*/ 4) set_data(t_1, /*errorMessage*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let div1;
	let t_1;
	let div2;

	function select_block_type(ctx, dirty) {
		if (/*isAuthenticated*/ ctx[3] && (/*subscriptionStatus*/ ctx[5] === 'ACTIVE' || /*subscriptionStatus*/ ctx[5] === 'CANCELLED')) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			main = element("main");
			div1 = element("div");
			div1.innerHTML = `<div class="logo-container svelte-1038yqc"><img src="/static/icons/YekarLogo.svg" alt="Yekar-Logo" class="svelte-1038yqc"/></div>`;
			t_1 = space();
			div2 = element("div");
			if_block.c();
			attr(div1, "class", "left-panel svelte-1038yqc");
			attr(div2, "class", "right-panel svelte-1038yqc");
			attr(main, "class", "svelte-1038yqc");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, div1);
			append(main, t_1);
			append(main, div2);
			if_block.m(div2, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div2, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(main);
			if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $t;
	component_subscribe($$self, t, $$value => $$invalidate(6, $t = $$value));
	let email = '';
	let password = '';
	let errorMessage = '';
	let isAuthenticated = false;
	let authenticatedEmail = '';
	let subscriptionStatus = '';

	const checkAuthStatus = async () => {
		try {
			const response = await fetch('/api/auth-status/');
			const data = await response.json();

			if (response.ok && data.is_authenticated) {
				$$invalidate(3, isAuthenticated = true);
				$$invalidate(4, authenticatedEmail = data.email);
				$$invalidate(5, subscriptionStatus = data.subscription_status);

				if (subscriptionStatus === 'EXPIRED' || subscriptionStatus === 'INACTIVE') {
					window.location.href = '/account-settings';
				}
			}
		} catch(error) {
			console.error('Error checking auth status:', error);
		}
	};

	const handleLogout = async () => {
		try {
			const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

			const response = await fetch('/api/logout/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				}
			});

			if (response.ok) {
				window.location.reload();
			}
		} catch(error) {
			console.error('Logout error:', error);
		}
	};

	const handleSubmit = async event => {
		event.preventDefault();

		if (!email || !password) {
			console.error('Email or password is missing');
			$$invalidate(2, errorMessage = $t.login?.emptyFieldsError || 'Email and password must not be empty');
			return;
		}

		try {
			const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

			const response = await fetch('/api/login/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				},
				body: JSON.stringify({ username: email, password })
			});

			const data = await response.json();

			if (response.ok) {
				window.location.href = '/dashboard';
			} else {
				$$invalidate(2, errorMessage = data.error || ($t.login?.genericError || 'An error occurred'));
				console.error('Login error:', errorMessage);
			}
		} catch(error) {
			$$invalidate(2, errorMessage = $t.login?.genericError || 'An error occurred');
			console.error('Fetch error:', error);
		}
	};

	checkAuthStatus();
	const click_handler = () => window.location.href = '/dashboard';

	function input0_input_handler() {
		email = this.value;
		$$invalidate(0, email);
	}

	function input1_input_handler() {
		password = this.value;
		$$invalidate(1, password);
	}

	return [
		email,
		password,
		errorMessage,
		isAuthenticated,
		authenticatedEmail,
		subscriptionStatus,
		$t,
		handleLogout,
		handleSubmit,
		click_handler,
		input0_input_handler,
		input1_input_handler
	];
}

class Login extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

new Login({
    target: document.body,
});
//# sourceMappingURL=login.js.map
