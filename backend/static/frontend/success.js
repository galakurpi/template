import { S as SvelteComponent, i as init, s as safe_not_equal, H as assign, u as create_component, v as mount_component, I as get_spread_update, J as get_spread_object, w as transition_in, x as transition_out, y as destroy_component, K as exclude_internal_props, L as create_slot, M as update_slot_base, N as get_all_dirty_from_scope, O as get_slot_changes, a as space, e as element, b as attr, c as insert, P as check_outros, f as detach, g as component_subscribe, p as onMount, Q as group_outros, t as text, d as append, j as set_data, n as noop, k as t } from './i18n-b2e39bd5.js';
import { I as Icon, P as PublicNavbar } from './PublicNavbar-1f5397ba.js';
import { A as AlertTriangle } from './alert-triangle-c3d45ff5.js';
import { C as CheckCircle } from './check-circle-075d41e3.js';

/* node_modules\lucide-svelte\dist\svelte\icons\loader.svelte generated by Svelte v3.59.2 */

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let icon;
	let current;
	const icon_spread_levels = [{ name: "loader" }, /*$$props*/ ctx[1], { iconNode: /*iconNode*/ ctx[0] }];

	let icon_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < icon_spread_levels.length; i += 1) {
		icon_props = assign(icon_props, icon_spread_levels[i]);
	}

	icon = new Icon({ props: icon_props });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_changes = (dirty & /*$$props, iconNode*/ 3)
			? get_spread_update(icon_spread_levels, [
					icon_spread_levels[0],
					dirty & /*$$props*/ 2 && get_spread_object(/*$$props*/ ctx[1]),
					dirty & /*iconNode*/ 1 && { iconNode: /*iconNode*/ ctx[0] }
				])
			: {};

			if (dirty & /*$$scope*/ 8) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	const iconNode = [
		[
			"line",
			{
				"x1": "12",
				"x2": "12",
				"y1": "2",
				"y2": "6"
			}
		],
		[
			"line",
			{
				"x1": "12",
				"x2": "12",
				"y1": "18",
				"y2": "22"
			}
		],
		[
			"line",
			{
				"x1": "4.93",
				"x2": "7.76",
				"y1": "4.93",
				"y2": "7.76"
			}
		],
		[
			"line",
			{
				"x1": "16.24",
				"x2": "19.07",
				"y1": "16.24",
				"y2": "19.07"
			}
		],
		[
			"line",
			{
				"x1": "2",
				"x2": "6",
				"y1": "12",
				"y2": "12"
			}
		],
		[
			"line",
			{
				"x1": "18",
				"x2": "22",
				"y1": "12",
				"y2": "12"
			}
		],
		[
			"line",
			{
				"x1": "4.93",
				"x2": "7.76",
				"y1": "19.07",
				"y2": "16.24"
			}
		],
		[
			"line",
			{
				"x1": "16.24",
				"x2": "19.07",
				"y1": "7.76",
				"y2": "4.93"
			}
		]
	];

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [iconNode, $$props, slots, $$scope];
}

class Loader extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

var Loader$1 = Loader;

/* src\landing\Success.svelte generated by Svelte v3.59.2 */

function create_if_block_2(ctx) {
	let div1;
	let alerttriangle;
	let t0;
	let h1;
	let t2;
	let p0;
	let t3;
	let t4;
	let p1;
	let t6;
	let div0;
	let a0;
	let t7_value = (/*$t*/ ctx[4].cancel?.emailButton || 'Email') + "";
	let t7;
	let t8;
	let a1;
	let t9_value = (/*$t*/ ctx[4].cancel?.whatsappButton || 'WhatsApp') + "";
	let t9;
	let current;

	alerttriangle = new AlertTriangle({
			props: { class: "icon error-icon", size: 64 }
		});

	return {
		c() {
			div1 = element("div");
			create_component(alerttriangle.$$.fragment);
			t0 = space();
			h1 = element("h1");
			h1.textContent = "An error occurred";
			t2 = space();
			p0 = element("p");
			t3 = text(/*message*/ ctx[3]);
			t4 = space();
			p1 = element("p");
			p1.textContent = "Please contact support for assistance.";
			t6 = space();
			div0 = element("div");
			a0 = element("a");
			t7 = text(t7_value);
			t8 = space();
			a1 = element("a");
			t9 = text(t9_value);
			attr(h1, "class", "title error-title svelte-6m1jn3");
			attr(p0, "class", "message error-message svelte-6m1jn3");
			attr(a0, "href", "mailto:jon@yekar.es");
			attr(a0, "class", "btn email-btn svelte-6m1jn3");
			attr(a1, "href", whatsappLink);
			attr(a1, "target", "_blank");
			attr(a1, "rel", "noopener noreferrer");
			attr(a1, "class", "btn whatsapp-btn svelte-6m1jn3");
			attr(div0, "class", "button-container svelte-6m1jn3");
			attr(div1, "class", "content svelte-6m1jn3");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(alerttriangle, div1, null);
			append(div1, t0);
			append(div1, h1);
			append(div1, t2);
			append(div1, p0);
			append(p0, t3);
			append(div1, t4);
			append(div1, p1);
			append(div1, t6);
			append(div1, div0);
			append(div0, a0);
			append(a0, t7);
			append(div0, t8);
			append(div0, a1);
			append(a1, t9);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*message*/ 8) set_data(t3, /*message*/ ctx[3]);
			if ((!current || dirty & /*$t*/ 16) && t7_value !== (t7_value = (/*$t*/ ctx[4].cancel?.emailButton || 'Email') + "")) set_data(t7, t7_value);
			if ((!current || dirty & /*$t*/ 16) && t9_value !== (t9_value = (/*$t*/ ctx[4].cancel?.whatsappButton || 'WhatsApp') + "")) set_data(t9, t9_value);
		},
		i(local) {
			if (current) return;
			transition_in(alerttriangle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alerttriangle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(alerttriangle);
		}
	};
}

// (85:22) 
function create_if_block_1(ctx) {
	let div;
	let checkcircle;
	let t0;
	let h1;
	let t1_value = (/*$t*/ ctx[4].success?.title || 'Welcome!') + "";
	let t1;
	let t2;
	let p;
	let raw_value = (/*$t*/ ctx[4].success?.message || 'Thank you for using Yekar.<br>You can now log in to your account.') + "";
	let t3;
	let a;
	let t4_value = (/*$t*/ ctx[4].success?.loginButton || 'Log In') + "";
	let t4;
	let current;

	checkcircle = new CheckCircle({
			props: { class: "icon success-icon", size: 64 }
		});

	return {
		c() {
			div = element("div");
			create_component(checkcircle.$$.fragment);
			t0 = space();
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = space();
			a = element("a");
			t4 = text(t4_value);
			attr(h1, "class", "title success-title svelte-6m1jn3");
			attr(p, "class", "message svelte-6m1jn3");
			attr(a, "href", "/api/login");
			attr(a, "class", "btn login-btn svelte-6m1jn3");
			attr(div, "class", "content svelte-6m1jn3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(checkcircle, div, null);
			append(div, t0);
			append(div, h1);
			append(h1, t1);
			append(div, t2);
			append(div, p);
			p.innerHTML = raw_value;
			append(div, t3);
			append(div, a);
			append(a, t4);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 16) && t1_value !== (t1_value = (/*$t*/ ctx[4].success?.title || 'Welcome!') + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*$t*/ 16) && raw_value !== (raw_value = (/*$t*/ ctx[4].success?.message || 'Thank you for using Yekar.<br>You can now log in to your account.') + "")) p.innerHTML = raw_value;			if ((!current || dirty & /*$t*/ 16) && t4_value !== (t4_value = (/*$t*/ ctx[4].success?.loginButton || 'Log In') + "")) set_data(t4, t4_value);
		},
		i(local) {
			if (current) return;
			transition_in(checkcircle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkcircle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(checkcircle);
		}
	};
}

// (79:4) {#if processing}
function create_if_block(ctx) {
	let div;
	let loader;
	let t0;
	let h1;
	let t2;
	let p;
	let current;
	loader = new Loader$1({ props: { class: "icon", size: 64 } });

	return {
		c() {
			div = element("div");
			create_component(loader.$$.fragment);
			t0 = space();
			h1 = element("h1");
			h1.textContent = "Processing your payment...";
			t2 = space();
			p = element("p");
			p.textContent = "Please wait while we confirm your subscription.";
			attr(h1, "class", "title svelte-6m1jn3");
			attr(p, "class", "message svelte-6m1jn3");
			attr(div, "class", "content svelte-6m1jn3");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(loader, div, null);
			append(div, t0);
			append(div, h1);
			append(div, t2);
			append(div, p);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(loader);
		}
	};
}

function create_fragment(ctx) {
	let publicnavbar;
	let t_1;
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	publicnavbar = new PublicNavbar({ props: { currentPage: "landing" } });
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*processing*/ ctx[0]) return 0;
		if (/*success*/ ctx[1]) return 1;
		if (/*error*/ ctx[2]) return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			create_component(publicnavbar.$$.fragment);
			t_1 = space();
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "container svelte-6m1jn3");
		},
		m(target, anchor) {
			mount_component(publicnavbar, target, anchor);
			insert(target, t_1, anchor);
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, null);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(publicnavbar.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(publicnavbar.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(publicnavbar, detaching);
			if (detaching) detach(t_1);
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}
		}
	};
}

const maxRetries = 15;
const retryInterval = 2000;
const whatsappLink = "https://wa.me/34747405452";

function instance($$self, $$props, $$invalidate) {
	let $t;
	component_subscribe($$self, t, $$value => $$invalidate(4, $t = $$value));
	let processing = true;
	let success = false;
	let error = false;
	let message = '';
	let session_id = '';
	let retryCount = 0;

	onMount(() => {
		const urlParams = new URLSearchParams(window.location.search);
		const sessionParam = urlParams.get('session_id');

		if (!sessionParam) {
			$$invalidate(2, error = true);
			$$invalidate(3, message = 'No session ID provided.');
			$$invalidate(0, processing = false);
		} else {
			session_id = sessionParam;
			checkStatus();
		}
	});

	const checkStatus = async () => {
		if (!session_id) {
			$$invalidate(2, error = true);
			$$invalidate(3, message = 'No session ID available.');
			$$invalidate(0, processing = false);
			return;
		}

		if (retryCount >= maxRetries) {
			$$invalidate(2, error = true);
			$$invalidate(3, message = 'Payment processing is taking longer than expected. Please check your payment method or contact support for assistance.');
			$$invalidate(0, processing = false);
			return;
		}

		retryCount++;

		try {
			const response = await fetch(`/api/check_payment_status/?session_id=${session_id}`);

			if (response.ok) {
				const data = await response.json();
				console.log('Payment status response:', data);

				if (data.status === 'completed') {
					$$invalidate(1, success = true);
					$$invalidate(0, processing = false);
				} else if (data.status === 'pending') {
					setTimeout(checkStatus, retryInterval);
				} else if (data.status === 'error') {
					$$invalidate(2, error = true);
					$$invalidate(3, message = data.message || 'Your payment could not be processed. Please try again or contact support.');
					$$invalidate(0, processing = false);
				}
			} else {
				const errorData = await response.json();
				console.error('Payment status error:', errorData);
				$$invalidate(2, error = true);
				$$invalidate(3, message = errorData.message || 'An error occurred while checking payment status. Please contact support.');
				$$invalidate(0, processing = false);
			}
		} catch(err) {
			console.error('Payment status check error:', err);
			$$invalidate(2, error = true);
			$$invalidate(3, message = 'An error occurred while checking payment status. Please try again or contact support.');
			$$invalidate(0, processing = false);
		}
	};

	return [processing, success, error, message, $t];
}

class Success extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

new Success({
    target: document.body,
});
//# sourceMappingURL=success.js.map
