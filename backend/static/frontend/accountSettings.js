import { S as SvelteComponent, i as init, s as safe_not_equal, H as assign, u as create_component, v as mount_component, I as get_spread_update, J as get_spread_object, w as transition_in, x as transition_out, y as destroy_component, K as exclude_internal_props, L as create_slot, M as update_slot_base, N as get_all_dirty_from_scope, O as get_slot_changes, a as space, e as element, b as attr, c as insert, d as append, P as check_outros, f as detach, g as component_subscribe, p as onMount, t as text, j as set_data, Q as group_outros, l as listen, r as run_all, n as noop, k as t } from './i18n-b2e39bd5.js';
import { I as Icon, P as PublicNavbar } from './PublicNavbar-1f5397ba.js';
import { A as AlertTriangle } from './alert-triangle-c3d45ff5.js';
import { C as CheckCircle } from './check-circle-075d41e3.js';

/* node_modules\lucide-svelte\dist\svelte\icons\mail.svelte generated by Svelte v3.59.2 */

function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let icon;
	let current;
	const icon_spread_levels = [{ name: "mail" }, /*$$props*/ ctx[1], { iconNode: /*iconNode*/ ctx[0] }];

	let icon_props = {
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < icon_spread_levels.length; i += 1) {
		icon_props = assign(icon_props, icon_spread_levels[i]);
	}

	icon = new Icon({ props: icon_props });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_changes = (dirty & /*$$props, iconNode*/ 3)
			? get_spread_update(icon_spread_levels, [
					icon_spread_levels[0],
					dirty & /*$$props*/ 2 && get_spread_object(/*$$props*/ ctx[1]),
					dirty & /*iconNode*/ 1 && { iconNode: /*iconNode*/ ctx[0] }
				])
			: {};

			if (dirty & /*$$scope*/ 8) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	const iconNode = [
		[
			"rect",
			{
				"width": "20",
				"height": "16",
				"x": "2",
				"y": "4",
				"rx": "2"
			}
		],
		[
			"path",
			{
				"d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"
			}
		]
	];

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [iconNode, $$props, slots, $$scope];
}

class Mail extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
	}
}

var Mail$1 = Mail;

/* node_modules\lucide-svelte\dist\svelte\icons\x-circle.svelte generated by Svelte v3.59.2 */

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let icon;
	let current;
	const icon_spread_levels = [{ name: "x-circle" }, /*$$props*/ ctx[1], { iconNode: /*iconNode*/ ctx[0] }];

	let icon_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < icon_spread_levels.length; i += 1) {
		icon_props = assign(icon_props, icon_spread_levels[i]);
	}

	icon = new Icon({ props: icon_props });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_changes = (dirty & /*$$props, iconNode*/ 3)
			? get_spread_update(icon_spread_levels, [
					icon_spread_levels[0],
					dirty & /*$$props*/ 2 && get_spread_object(/*$$props*/ ctx[1]),
					dirty & /*iconNode*/ 1 && { iconNode: /*iconNode*/ ctx[0] }
				])
			: {};

			if (dirty & /*$$scope*/ 8) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	const iconNode = [
		["circle", { "cx": "12", "cy": "12", "r": "10" }],
		["path", { "d": "m15 9-6 6" }],
		["path", { "d": "m9 9 6 6" }]
	];

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [iconNode, $$props, slots, $$scope];
}

class X_circle extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

var XCircle = X_circle;

/* src\auth\AccountSettings.svelte generated by Svelte v3.59.2 */

function create_if_block_9(ctx) {
	let div;
	let mail;
	let t0;
	let span;
	let t1;
	let current;
	mail = new Mail$1({ props: { class: "email-icon", size: 24 } });

	return {
		c() {
			div = element("div");
			create_component(mail.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(/*userEmail*/ ctx[3]);
			attr(span, "class", "email-text svelte-1ifc0kn");
			attr(div, "class", "email-container svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(mail, div, null);
			append(div, t0);
			append(div, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*userEmail*/ 8) set_data(t1, /*userEmail*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(mail.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(mail.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(mail);
		}
	};
}

// (267:4) {:else}
function create_else_block_1(ctx) {
	let current_block_type_index;
	let if_block0;
	let t0;
	let div1;
	let div0;
	let button0;
	let t1;
	let button1;
	let t2_value = (/*$t*/ ctx[5].nav?.logout || 'LOG OUT') + "";
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_7, create_if_block_8];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*subscriptionStatus*/ ctx[0] === 'CANCELLED') return 0;
		if (/*subscriptionStatus*/ ctx[0] === 'EXPIRED') return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_2(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	function select_block_type_3(ctx, dirty) {
		if (/*isActivating*/ ctx[4]) return create_if_block_6;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_3(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*userEmail*/ ctx[3] && create_if_block_5(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			if_block1.c();
			t1 = space();
			button1 = element("button");
			t2 = text(t2_value);
			t3 = space();
			if (if_block2) if_block2.c();
			attr(button0, "class", "btn activate-btn svelte-1ifc0kn");
			button0.disabled = /*isActivating*/ ctx[4];
			attr(button1, "class", "btn logout-btn svelte-1ifc0kn");
			attr(div0, "class", "action-buttons svelte-1ifc0kn");
			attr(div1, "class", "lower-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, button0);
			if_block1.m(button0, null);
			append(div0, t1);
			append(div0, button1);
			append(button1, t2);
			append(div0, t3);
			if (if_block2) if_block2.m(div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*handleActivateAccount*/ ctx[7]),
					listen(button1, "click", handleLogout)
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				} else {
					if_block0 = null;
				}
			}

			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(button0, null);
				}
			}

			if (!current || dirty & /*isActivating*/ 16) {
				button0.disabled = /*isActivating*/ ctx[4];
			}

			if ((!current || dirty & /*$t*/ 32) && t2_value !== (t2_value = (/*$t*/ ctx[5].nav?.logout || 'LOG OUT') + "")) set_data(t2, t2_value);

			if (/*userEmail*/ ctx[3]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (256:57) 
function create_if_block_4(ctx) {
	let div1;
	let div0;
	let xcircle;
	let t0;
	let span;
	let t1_value = (/*$t*/ ctx[5].accountSettings?.notAuthenticatedStatus || 'You are not authenticated') + "";
	let t1;
	let t2;
	let button;
	let t3_value = (/*$t*/ ctx[5].accountSettings?.createAccountButton || 'Create account') + "";
	let t3;
	let current;
	let mounted;
	let dispose;

	xcircle = new XCircle({
			props: { class: "status-icon", size: 24 }
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(xcircle.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			button = element("button");
			t3 = text(t3_value);
			attr(div0, "class", "status-container NOT_AUTHENTICATED svelte-1ifc0kn");
			attr(button, "class", "btn activate-btn create-account-btn svelte-1ifc0kn");
			attr(div1, "class", "upper-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(xcircle, div0, null);
			append(div0, t0);
			append(div0, span);
			append(span, t1);
			append(div1, t2);
			append(div1, button);
			append(button, t3);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 32) && t1_value !== (t1_value = (/*$t*/ ctx[5].accountSettings?.notAuthenticatedStatus || 'You are not authenticated') + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*$t*/ 32) && t3_value !== (t3_value = (/*$t*/ ctx[5].accountSettings?.createAccountButton || 'Create account') + "")) set_data(t3, t3_value);
		},
		i(local) {
			if (current) return;
			transition_in(xcircle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xcircle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(xcircle);
			mounted = false;
			dispose();
		}
	};
}

// (222:4) {#if subscriptionStatus === 'ACTIVE'}
function create_if_block_2(ctx) {
	let div1;
	let h2;
	let t0_value = (/*$t*/ ctx[5].accountSettings?.contactTitle || 'Contact us') + "";
	let t0;
	let t1;
	let div0;
	let a0;
	let t2_value = (/*$t*/ ctx[5].accountSettings?.emailButton || 'Email') + "";
	let t2;
	let t3;
	let a1;
	let t4_value = (/*$t*/ ctx[5].accountSettings?.whatsappButton || 'WhatsApp') + "";
	let t4;
	let t5;
	let div4;
	let div2;
	let checkcircle;
	let t6;
	let span;
	let t7_value = (/*$t*/ ctx[5].accountSettings?.activeStatus || 'Your account is active') + "";
	let t7;
	let t8;
	let div3;
	let button0;
	let t9;
	let button1;
	let t10_value = (/*$t*/ ctx[5].nav?.logout || 'LOG OUT') + "";
	let t10;
	let t11;
	let button2;
	let current;
	let mounted;
	let dispose;

	checkcircle = new CheckCircle({
			props: { class: "status-icon", size: 24 }
		});

	function select_block_type_1(ctx, dirty) {
		if (/*isCanceling*/ ctx[2]) return create_if_block_3;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div1 = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			a0 = element("a");
			t2 = text(t2_value);
			t3 = space();
			a1 = element("a");
			t4 = text(t4_value);
			t5 = space();
			div4 = element("div");
			div2 = element("div");
			create_component(checkcircle.$$.fragment);
			t6 = space();
			span = element("span");
			t7 = text(t7_value);
			t8 = space();
			div3 = element("div");
			button0 = element("button");
			if_block.c();
			t9 = space();
			button1 = element("button");
			t10 = text(t10_value);
			t11 = space();
			button2 = element("button");
			button2.textContent = "Delete Account";
			attr(h2, "class", "contact-title svelte-1ifc0kn");
			attr(a0, "href", "mailto:jon@yekar.es");
			attr(a0, "class", "btn email-btn svelte-1ifc0kn");
			attr(a1, "href", whatsappLink);
			attr(a1, "target", "_blank");
			attr(a1, "rel", "noopener noreferrer");
			attr(a1, "class", "btn whatsapp-btn svelte-1ifc0kn");
			attr(div0, "class", "button-container svelte-1ifc0kn");
			attr(div1, "class", "upper-section svelte-1ifc0kn");
			attr(div2, "class", "status-container ACTIVE svelte-1ifc0kn");
			attr(button0, "class", "btn cancel-btn svelte-1ifc0kn");
			button0.disabled = /*isCanceling*/ ctx[2];
			attr(button1, "class", "btn logout-btn svelte-1ifc0kn");
			attr(button2, "class", "btn delete-btn svelte-1ifc0kn");
			attr(div3, "class", "action-buttons svelte-1ifc0kn");
			attr(div4, "class", "lower-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h2);
			append(h2, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, a0);
			append(a0, t2);
			append(div0, t3);
			append(div0, a1);
			append(a1, t4);
			insert(target, t5, anchor);
			insert(target, div4, anchor);
			append(div4, div2);
			mount_component(checkcircle, div2, null);
			append(div2, t6);
			append(div2, span);
			append(span, t7);
			append(div4, t8);
			append(div4, div3);
			append(div3, button0);
			if_block.m(button0, null);
			append(div3, t9);
			append(div3, button1);
			append(button1, t10);
			append(div3, t11);
			append(div3, button2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*handleCancelSubscription*/ ctx[6]),
					listen(button1, "click", handleLogout),
					listen(button2, "click", /*handleDeleteAccount*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 32) && t0_value !== (t0_value = (/*$t*/ ctx[5].accountSettings?.contactTitle || 'Contact us') + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*$t*/ 32) && t2_value !== (t2_value = (/*$t*/ ctx[5].accountSettings?.emailButton || 'Email') + "")) set_data(t2, t2_value);
			if ((!current || dirty & /*$t*/ 32) && t4_value !== (t4_value = (/*$t*/ ctx[5].accountSettings?.whatsappButton || 'WhatsApp') + "")) set_data(t4, t4_value);
			if ((!current || dirty & /*$t*/ 32) && t7_value !== (t7_value = (/*$t*/ ctx[5].accountSettings?.activeStatus || 'Your account is active') + "")) set_data(t7, t7_value);

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button0, null);
				}
			}

			if (!current || dirty & /*isCanceling*/ 4) {
				button0.disabled = /*isCanceling*/ ctx[2];
			}

			if ((!current || dirty & /*$t*/ 32) && t10_value !== (t10_value = (/*$t*/ ctx[5].nav?.logout || 'LOG OUT') + "")) set_data(t10, t10_value);
		},
		i(local) {
			if (current) return;
			transition_in(checkcircle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkcircle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching) detach(t5);
			if (detaching) detach(div4);
			destroy_component(checkcircle);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (275:49) 
function create_if_block_8(ctx) {
	let div1;
	let div0;
	let xcircle;
	let t0;
	let span;
	let t1_value = (/*$t*/ ctx[5].accountSettings?.expiredStatus || 'Your subscription has expired') + "";
	let t1;
	let current;

	xcircle = new XCircle({
			props: { class: "status-icon", size: 24 }
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(xcircle.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			attr(div0, "class", "status-container EXPIRED svelte-1ifc0kn");
			attr(div1, "class", "upper-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(xcircle, div0, null);
			append(div0, t0);
			append(div0, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 32) && t1_value !== (t1_value = (/*$t*/ ctx[5].accountSettings?.expiredStatus || 'Your subscription has expired') + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(xcircle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xcircle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(xcircle);
		}
	};
}

// (268:6) {#if subscriptionStatus === 'CANCELLED' }
function create_if_block_7(ctx) {
	let div1;
	let div0;
	let xcircle;
	let t0;
	let span;
	let t1_value = (/*$t*/ ctx[5].accountSettings?.cancelledStatus || 'Your account has been cancelled, you can still use the app until your account expires') + "";
	let t1;
	let current;

	xcircle = new XCircle({
			props: { class: "status-icon", size: 24 }
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(xcircle.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			attr(div0, "class", "status-container CANCELLED svelte-1ifc0kn");
			attr(div1, "class", "upper-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(xcircle, div0, null);
			append(div0, t0);
			append(div0, span);
			append(span, t1);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 32) && t1_value !== (t1_value = (/*$t*/ ctx[5].accountSettings?.cancelledStatus || 'Your account has been cancelled, you can still use the app until your account expires') + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(xcircle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(xcircle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(xcircle);
		}
	};
}

// (289:12) {:else}
function create_else_block_2(ctx) {
	let t_1_value = (/*$t*/ ctx[5].accountSettings?.activateButton || 'Activate account') + "";
	let t_1;

	return {
		c() {
			t_1 = text(t_1_value);
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 32 && t_1_value !== (t_1_value = (/*$t*/ ctx[5].accountSettings?.activateButton || 'Activate account') + "")) set_data(t_1, t_1_value);
		},
		d(detaching) {
			if (detaching) detach(t_1);
		}
	};
}

// (287:12) {#if isActivating}
function create_if_block_6(ctx) {
	let t_1_value = (/*$t*/ ctx[5].accountSettings?.activatingButton || 'Activating...') + "";
	let t_1;

	return {
		c() {
			t_1 = text(t_1_value);
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 32 && t_1_value !== (t_1_value = (/*$t*/ ctx[5].accountSettings?.activatingButton || 'Activating...') + "")) set_data(t_1, t_1_value);
		},
		d(detaching) {
			if (detaching) detach(t_1);
		}
	};
}

// (296:10) {#if userEmail}
function create_if_block_5(ctx) {
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Delete Account";
			attr(button, "class", "btn delete-btn svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*handleDeleteAccount*/ ctx[8]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (244:12) {:else}
function create_else_block(ctx) {
	let t_1_value = (/*$t*/ ctx[5].accountSettings?.cancelAccountButton || 'Cancel account') + "";
	let t_1;

	return {
		c() {
			t_1 = text(t_1_value);
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 32 && t_1_value !== (t_1_value = (/*$t*/ ctx[5].accountSettings?.cancelAccountButton || 'Cancel account') + "")) set_data(t_1, t_1_value);
		},
		d(detaching) {
			if (detaching) detach(t_1);
		}
	};
}

// (242:12) {#if isCanceling}
function create_if_block_3(ctx) {
	let t_1_value = (/*$t*/ ctx[5].accountSettings?.cancellingButton || 'Cancelling...') + "";
	let t_1;

	return {
		c() {
			t_1 = text(t_1_value);
		},
		m(target, anchor) {
			insert(target, t_1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 32 && t_1_value !== (t_1_value = (/*$t*/ ctx[5].accountSettings?.cancellingButton || 'Cancelling...') + "")) set_data(t_1, t_1_value);
		},
		d(detaching) {
			if (detaching) detach(t_1);
		}
	};
}

// (306:4) {#if message}
function create_if_block_1(ctx) {
	let div;
	let alerttriangle;
	let t0;
	let p;
	let t1;
	let current;

	alerttriangle = new AlertTriangle({
			props: { class: "message-icon", size: 24 }
		});

	return {
		c() {
			div = element("div");
			create_component(alerttriangle.$$.fragment);
			t0 = space();
			p = element("p");
			t1 = text(/*message*/ ctx[1]);
			attr(div, "class", "message-container svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(alerttriangle, div, null);
			append(div, t0);
			append(div, p);
			append(p, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*message*/ 2) set_data(t1, /*message*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(alerttriangle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alerttriangle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(alerttriangle);
		}
	};
}

// (313:4) {#if subscriptionStatus !== 'ACTIVE'}
function create_if_block(ctx) {
	let div1;
	let h2;
	let t0_value = (/*$t*/ ctx[5].accountSettings?.contactTitle || 'Contact us') + "";
	let t0;
	let t1;
	let div0;
	let a0;
	let t2_value = (/*$t*/ ctx[5].accountSettings?.emailButton || 'Email') + "";
	let t2;
	let t3;
	let a1;
	let t4_value = (/*$t*/ ctx[5].accountSettings?.whatsappButton || 'WhatsApp') + "";
	let t4;

	return {
		c() {
			div1 = element("div");
			h2 = element("h2");
			t0 = text(t0_value);
			t1 = space();
			div0 = element("div");
			a0 = element("a");
			t2 = text(t2_value);
			t3 = space();
			a1 = element("a");
			t4 = text(t4_value);
			attr(h2, "class", "contact-title svelte-1ifc0kn");
			attr(a0, "href", "mailto:jon@yekar.es");
			attr(a0, "class", "btn email-btn svelte-1ifc0kn");
			attr(a1, "href", whatsappLink);
			attr(a1, "target", "_blank");
			attr(a1, "rel", "noopener noreferrer");
			attr(a1, "class", "btn whatsapp-btn svelte-1ifc0kn");
			attr(div0, "class", "button-container svelte-1ifc0kn");
			attr(div1, "class", "lower-section svelte-1ifc0kn");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h2);
			append(h2, t0);
			append(div1, t1);
			append(div1, div0);
			append(div0, a0);
			append(a0, t2);
			append(div0, t3);
			append(div0, a1);
			append(a1, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*$t*/ 32 && t0_value !== (t0_value = (/*$t*/ ctx[5].accountSettings?.contactTitle || 'Contact us') + "")) set_data(t0, t0_value);
			if (dirty & /*$t*/ 32 && t2_value !== (t2_value = (/*$t*/ ctx[5].accountSettings?.emailButton || 'Email') + "")) set_data(t2, t2_value);
			if (dirty & /*$t*/ 32 && t4_value !== (t4_value = (/*$t*/ ctx[5].accountSettings?.whatsappButton || 'WhatsApp') + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment(ctx) {
	let publicnavbar;
	let t0;
	let div1;
	let div0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let t2;
	let t3;
	let current;
	publicnavbar = new PublicNavbar({ props: { currentPage: "account" } });
	let if_block0 = /*userEmail*/ ctx[3] && create_if_block_9(ctx);
	const if_block_creators = [create_if_block_2, create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*subscriptionStatus*/ ctx[0] === 'ACTIVE') return 0;
		if (/*subscriptionStatus*/ ctx[0] === 'NOT_AUTHENTICATED') return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block2 = /*message*/ ctx[1] && create_if_block_1(ctx);
	let if_block3 = /*subscriptionStatus*/ ctx[0] !== 'ACTIVE' && create_if_block(ctx);

	return {
		c() {
			create_component(publicnavbar.$$.fragment);
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			attr(div0, "class", "account-content svelte-1ifc0kn");
			attr(div1, "class", "account-container svelte-1ifc0kn");
		},
		m(target, anchor) {
			mount_component(publicnavbar, target, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t1);
			if_blocks[current_block_type_index].m(div0, null);
			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t3);
			if (if_block3) if_block3.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*userEmail*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*userEmail*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div0, t2);
			}

			if (/*message*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*message*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*subscriptionStatus*/ ctx[0] !== 'ACTIVE') {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					if_block3.m(div0, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(publicnavbar.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(publicnavbar.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			destroy_component(publicnavbar, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

const whatsappLink = "https://wa.me/34747405452";

async function handleLogout() {
	try {
		const response = await fetch('/api/logout/', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'X-CSRFToken': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
			}
		});

		if (response.ok) {
			// Clear all cache
			localStorage.clear();

			sessionStorage.clear();

			document.cookie.split(";").forEach(function (c) {
				document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
			});

			// Clear application cache if supported by the browser
			if ('caches' in window) {
				caches.keys().then(function (names) {
					for (let name of names) caches.delete(name);
				});
			}

			// Redirect to login page
			window.location.href = '/api/login/';
		} else {
			console.error('Logout failed');
		}
	} catch(error) {
		console.error('Logout error:', error);
	}
}

function instance($$self, $$props, $$invalidate) {
	let $t;
	component_subscribe($$self, t, $$value => $$invalidate(5, $t = $$value));
	let subscriptionStatus = 'loading';
	let message = '';
	let isCanceling = false;
	let userEmail = '';
	let isAthlete = false;
	let isCoach = false;
	let isActivating = false;
	let stripePublishableKey = '';
	let stripe = null;

	async function getStripeKey() {
		try {
			const response = await fetch('/api/stripe-key/');
			const data = await response.json();
			stripePublishableKey = data.stripe_publishable_key;

			stripe = window.Stripe(stripePublishableKey, {
				scriptLoadOptions: { crossorigin: 'anonymous' }
			});

			console.log('Stripe initialized:', stripe);
		} catch(error) {
			console.error('Error fetching Stripe key:', error);
			$$invalidate(1, message = 'An error occurred while initializing payment system.');
		}
	}

	async function checkAuthStatus() {
		try {
			const response = await fetch('/api/auth-status/');
			const data = await response.json();
			console.log("Check auth status data:", data);

			if (response.ok) {
				if (data.is_authenticated) {
					$$invalidate(3, userEmail = data.email);
					$$invalidate(0, subscriptionStatus = data.subscription_status);
					isAthlete = data.is_athlete;
					isCoach = data.is_coach;
				} else {
					$$invalidate(0, subscriptionStatus = 'NOT_AUTHENTICATED');
					$$invalidate(3, userEmail = null); // Clear email if not authenticated
				}
			} else {
				$$invalidate(0, subscriptionStatus = 'NOT_AUTHENTICATED');
				$$invalidate(3, userEmail = null); // Clear email if not authenticated
				throw new Error('Failed to fetch auth status');
			}
		} catch(error) {
			console.error('Error checking auth status:', error);
			$$invalidate(1, message = $t.accountSettings?.errorMessage || 'An error occurred while fetching account information.');
		}
	}

	onMount(async () => {
		await checkAuthStatus();
	});

	async function handleCancelSubscription() {
		$$invalidate(2, isCanceling = true);

		try {
			const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

			const response = await fetch('/api/cancel-subscription/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				},
				body: JSON.stringify({ email: userEmail })
			});

			if (!response.ok) {
				const errorData = await response.json();
				throw new Error(errorData.message || 'Failed to cancel the subscription');
			}

			const data = await response.json();

			if (data.success) {
				$$invalidate(0, subscriptionStatus = 'CANCELLED');
				$$invalidate(1, message = 'Your account has been cancelled, you can still use the app until your account expires');
			} else {
				$$invalidate(1, message = 'Failed to cancel the account. Please try again later.');
			}
		} catch(error) {
			console.error(error);
			$$invalidate(1, message = 'An error occurred while canceling your account.');
		} finally {
			$$invalidate(2, isCanceling = false);
		}
	}

	async function handleActivateAccount() {
		await getStripeKey();
		$$invalidate(4, isActivating = true);

		try {
			const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

			const response = await fetch('/api/get_checkout_session_for_registered/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				},
				body: JSON.stringify({ product_type: 'monthly' })
			});

			if (!response.ok) {
				throw new Error('Failed to create checkout session');
			}

			const data = await response.json();

			if (data.sessionId) {
				// Redirect to Stripe Checkout
				const result = await stripe.redirectToCheckout({ sessionId: data.sessionId });

				if (result.error) {
					throw new Error(result.error.message);
				}
			} else {
				throw new Error('No session ID returned');
			}
		} catch(error) {
			console.error(error);
			$$invalidate(1, message = 'An error occurred while activating your account. Please try again later.');
		} finally {
			$$invalidate(4, isActivating = false);
		}
	}

	async function handleDeleteAccount() {
		if (!confirm($t.accountSettings?.deleteAccount?.confirmMessage || 'Are you sure you want to delete your account? This action cannot be undone.')) {
			return;
		}

		try {
			const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");

			const response = await fetch('/api/delete-account/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRFToken': csrfToken
				}
			});

			if (!response.ok) {
				throw new Error('Failed to delete account');
			}

			// If successful, clear everything and redirect to login
			localStorage.clear();

			sessionStorage.clear();

			document.cookie.split(";").forEach(function (c) {
				document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
			});

			window.location.href = '/api/login/';
		} catch(error) {
			console.error('Delete account error:', error);
			$$invalidate(1, message = 'An error occurred while deleting your account. Please try again later.');
		}
	}

	const click_handler = () => window.location.href = '/register';

	return [
		subscriptionStatus,
		message,
		isCanceling,
		userEmail,
		isActivating,
		$t,
		handleCancelSubscription,
		handleActivateAccount,
		handleDeleteAccount,
		click_handler
	];
}

class AccountSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

new AccountSettings({
    target: document.body,
});
//# sourceMappingURL=accountSettings.js.map
