import { S as SvelteComponent, i as init, s as safe_not_equal, L as create_slot, H as assign, R as svg_element, T as empty, U as set_svg_attributes, c as insert, d as append, M as update_slot_base, N as get_all_dirty_from_scope, O as get_slot_changes, I as get_spread_update, w as transition_in, x as transition_out, f as detach, D as destroy_each, V as compute_rest_props, K as exclude_internal_props, u as create_component, v as mount_component, J as get_spread_object, y as destroy_component, e as element, a as space, t as text, b as attr, l as listen, j as set_data, Q as group_outros, P as check_outros, g as component_subscribe, k as t, W as createEventDispatcher, r as run_all } from './i18n-b2e39bd5.js';

/**
 * @license lucide-svelte v0.294.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};

/* node_modules\lucide-svelte\dist\svelte\Icon.svelte generated by Svelte v3.59.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i][0];
	child_ctx[11] = list[i][1];
	return child_ctx;
}

// (24:4) <svelte:element this={tag} {...attrs}/>
function create_dynamic_element(ctx) {
	let svelte_element;
	let svelte_element_levels = [/*attrs*/ ctx[11]];
	let svelte_element_data = {};

	for (let i = 0; i < svelte_element_levels.length; i += 1) {
		svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
	}

	return {
		c() {
			svelte_element = svg_element(/*tag*/ ctx[10]);
			set_svg_attributes(svelte_element, svelte_element_data);
		},
		m(target, anchor) {
			insert(target, svelte_element, anchor);
		},
		p(ctx, dirty) {
			set_svg_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [dirty & /*iconNode*/ 32 && /*attrs*/ ctx[11]]));
		},
		d(detaching) {
			if (detaching) detach(svelte_element);
		}
	};
}

// (23:2) {#each iconNode as [tag, attrs]}
function create_each_block(ctx) {
	let previous_tag = /*tag*/ ctx[10];
	let svelte_element_anchor;
	let svelte_element = /*tag*/ ctx[10] && create_dynamic_element(ctx);

	return {
		c() {
			if (svelte_element) svelte_element.c();
			svelte_element_anchor = empty();
		},
		m(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			insert(target, svelte_element_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*tag*/ ctx[10]) {
				if (!previous_tag) {
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*tag*/ ctx[10];
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else if (safe_not_equal(previous_tag, /*tag*/ ctx[10])) {
					svelte_element.d(1);
					svelte_element = create_dynamic_element(ctx);
					previous_tag = /*tag*/ ctx[10];
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else {
					svelte_element.p(ctx, dirty);
				}
			} else if (previous_tag) {
				svelte_element.d(1);
				svelte_element = null;
				previous_tag = /*tag*/ ctx[10];
			}
		},
		d(detaching) {
			if (detaching) detach(svelte_element_anchor);
			if (svelte_element) svelte_element.d(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let svg;
	let each_1_anchor;
	let svg_stroke_width_value;
	let svg_class_value;
	let current;
	let each_value = /*iconNode*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	let svg_levels = [
		defaultAttributes,
		/*$$restProps*/ ctx[6],
		{ width: /*size*/ ctx[2] },
		{ height: /*size*/ ctx[2] },
		{ stroke: /*color*/ ctx[1] },
		{
			"stroke-width": svg_stroke_width_value = /*absoluteStrokeWidth*/ ctx[4]
			? Number(/*strokeWidth*/ ctx[3]) * 24 / Number(/*size*/ ctx[2])
			: /*strokeWidth*/ ctx[3]
		},
		{
			class: svg_class_value = `lucide-icon lucide lucide-${/*name*/ ctx[0]} ${/*$$props*/ ctx[7].class ?? ''}`
		}
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			if (default_slot) default_slot.c();
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(svg, null);
				}
			}

			append(svg, each_1_anchor);

			if (default_slot) {
				default_slot.m(svg, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*iconNode*/ 32) {
				each_value = /*iconNode*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(svg, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				defaultAttributes,
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				(!current || dirty & /*size*/ 4) && { width: /*size*/ ctx[2] },
				(!current || dirty & /*size*/ 4) && { height: /*size*/ ctx[2] },
				(!current || dirty & /*color*/ 2) && { stroke: /*color*/ ctx[1] },
				(!current || dirty & /*absoluteStrokeWidth, strokeWidth, size*/ 28 && svg_stroke_width_value !== (svg_stroke_width_value = /*absoluteStrokeWidth*/ ctx[4]
				? Number(/*strokeWidth*/ ctx[3]) * 24 / Number(/*size*/ ctx[2])
				: /*strokeWidth*/ ctx[3])) && { "stroke-width": svg_stroke_width_value },
				(!current || dirty & /*name, $$props*/ 129 && svg_class_value !== (svg_class_value = `lucide-icon lucide lucide-${/*name*/ ctx[0]} ${/*$$props*/ ctx[7].class ?? ''}`)) && { class: svg_class_value }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(svg);
			destroy_each(each_blocks, detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["name","color","size","strokeWidth","absoluteStrokeWidth","iconNode"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { name } = $$props;
	let { color = 'currentColor' } = $$props;
	let { size = 24 } = $$props;
	let { strokeWidth = 2 } = $$props;
	let { absoluteStrokeWidth = false } = $$props;
	let { iconNode } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('name' in $$new_props) $$invalidate(0, name = $$new_props.name);
		if ('color' in $$new_props) $$invalidate(1, color = $$new_props.color);
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('strokeWidth' in $$new_props) $$invalidate(3, strokeWidth = $$new_props.strokeWidth);
		if ('absoluteStrokeWidth' in $$new_props) $$invalidate(4, absoluteStrokeWidth = $$new_props.absoluteStrokeWidth);
		if ('iconNode' in $$new_props) $$invalidate(5, iconNode = $$new_props.iconNode);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);

	return [
		name,
		color,
		size,
		strokeWidth,
		absoluteStrokeWidth,
		iconNode,
		$$restProps,
		$$props,
		$$scope,
		slots
	];
}

class Icon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			name: 0,
			color: 1,
			size: 2,
			strokeWidth: 3,
			absoluteStrokeWidth: 4,
			iconNode: 5
		});
	}
}

var Icon$1 = Icon;

/* node_modules\lucide-svelte\dist\svelte\icons\user.svelte generated by Svelte v3.59.2 */

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let icon;
	let current;
	const icon_spread_levels = [{ name: "user" }, /*$$props*/ ctx[1], { iconNode: /*iconNode*/ ctx[0] }];

	let icon_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < icon_spread_levels.length; i += 1) {
		icon_props = assign(icon_props, icon_spread_levels[i]);
	}

	icon = new Icon$1({ props: icon_props });

	return {
		c() {
			create_component(icon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const icon_changes = (dirty & /*$$props, iconNode*/ 3)
			? get_spread_update(icon_spread_levels, [
					icon_spread_levels[0],
					dirty & /*$$props*/ 2 && get_spread_object(/*$$props*/ ctx[1]),
					dirty & /*iconNode*/ 1 && { iconNode: /*iconNode*/ ctx[0] }
				])
			: {};

			if (dirty & /*$$scope*/ 8) {
				icon_changes.$$scope = { dirty, ctx };
			}

			icon.$set(icon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	const iconNode = [
		[
			"path",
			{
				"d": "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"
			}
		],
		["circle", { "cx": "12", "cy": "7", "r": "4" }]
	];

	$$self.$$set = $$new_props => {
		$$invalidate(1, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [iconNode, $$props, slots, $$scope];
}

class User extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
	}
}

var User$1 = User;

/* src\common\PublicNavbar.svelte generated by Svelte v3.59.2 */

function create_if_block(ctx) {
	let a0;
	let t0_value = (/*$t*/ ctx[1].nav?.pricing || 'Pricing') + "";
	let t0;
	let t1;
	let a1;
	let t2_value = (/*$t*/ ctx[1].nav?.login || 'Log in') + "";
	let t2;
	let t3;
	let button;
	let user;
	let button_title_value;
	let t4;
	let a2;
	let t5_value = (/*$t*/ ctx[1].nav?.startNow || 'Start now') + "";
	let t5;
	let current;
	let mounted;
	let dispose;
	user = new User$1({ props: { size: 24 } });

	return {
		c() {
			a0 = element("a");
			t0 = text(t0_value);
			t1 = space();
			a1 = element("a");
			t2 = text(t2_value);
			t3 = space();
			button = element("button");
			create_component(user.$$.fragment);
			t4 = space();
			a2 = element("a");
			t5 = text(t5_value);
			attr(a0, "href", "/pricing");
			attr(a0, "class", "nav-button svelte-1n30chg");
			attr(a1, "href", "/api/login");
			attr(a1, "class", "nav-button svelte-1n30chg");
			attr(button, "class", "account-button svelte-1n30chg");
			attr(button, "title", button_title_value = /*$t*/ ctx[1].nav?.accountSettings || 'Account Settings');
			attr(a2, "href", "#");
			attr(a2, "class", "nav-button highlight svelte-1n30chg");
		},
		m(target, anchor) {
			insert(target, a0, anchor);
			append(a0, t0);
			insert(target, t1, anchor);
			insert(target, a1, anchor);
			append(a1, t2);
			insert(target, t3, anchor);
			insert(target, button, anchor);
			mount_component(user, button, null);
			insert(target, t4, anchor);
			insert(target, a2, anchor);
			append(a2, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", handleAccountSettingsClick),
					listen(a2, "click", /*handleStartNowClick*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$t*/ 2) && t0_value !== (t0_value = (/*$t*/ ctx[1].nav?.pricing || 'Pricing') + "")) set_data(t0, t0_value);
			if ((!current || dirty & /*$t*/ 2) && t2_value !== (t2_value = (/*$t*/ ctx[1].nav?.login || 'Log in') + "")) set_data(t2, t2_value);

			if (!current || dirty & /*$t*/ 2 && button_title_value !== (button_title_value = /*$t*/ ctx[1].nav?.accountSettings || 'Account Settings')) {
				attr(button, "title", button_title_value);
			}

			if ((!current || dirty & /*$t*/ 2) && t5_value !== (t5_value = (/*$t*/ ctx[1].nav?.startNow || 'Start now') + "")) set_data(t5, t5_value);
		},
		i(local) {
			if (current) return;
			transition_in(user.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(user.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a0);
			if (detaching) detach(t1);
			if (detaching) detach(a1);
			if (detaching) detach(t3);
			if (detaching) detach(button);
			destroy_component(user);
			if (detaching) detach(t4);
			if (detaching) detach(a2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div1;
	let div0;
	let t0;
	let div2;
	let a;
	let t1_value = (/*$t*/ ctx[1].nav?.landing || 'AI Solutions') + "";
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block = !/*isLandingPage*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			nav = element("nav");
			div1 = element("div");
			div0 = element("div");
			div0.innerHTML = `<img src="/static/icons/YekarLogo.svg" alt="Yekar-Logo" class="svelte-1n30chg"/>`;
			t0 = space();
			div2 = element("div");
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			attr(div0, "class", "logo-holder svelte-1n30chg");
			attr(div1, "class", "left-section svelte-1n30chg");
			attr(a, "href", "/landing");
			attr(a, "class", "nav-button svelte-1n30chg");
			attr(div2, "class", "right-section svelte-1n30chg");
			attr(nav, "class", "svelte-1n30chg");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div1);
			append(div1, div0);
			append(nav, t0);
			append(nav, div2);
			append(div2, a);
			append(a, t1);
			append(div2, t2);
			if (if_block) if_block.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", handleLogoClick);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*$t*/ 2) && t1_value !== (t1_value = (/*$t*/ ctx[1].nav?.landing || 'AI Solutions') + "")) set_data(t1, t1_value);

			if (!/*isLandingPage*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isLandingPage*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div2, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function handleLogoClick() {
	window.location.href = "/landing";
}

function handleAccountSettingsClick() {
	window.location.href = "/account-settings";
}

function instance($$self, $$props, $$invalidate) {
	let isLandingPage;
	let $t;
	component_subscribe($$self, t, $$value => $$invalidate(1, $t = $$value));
	createEventDispatcher();
	let { currentPage = 'landing' } = $$props;

	function handleStartNowClick(event) {
		event.preventDefault();

		if (currentPage === 'landing') {
			window.location.href = "/pricing?from=start_now";
		} else {
			window.location.href = "/register";
		}
	}

	$$self.$$set = $$props => {
		if ('currentPage' in $$props) $$invalidate(3, currentPage = $$props.currentPage);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentPage*/ 8) {
			$$invalidate(3, currentPage = currentPage === 'pricing' || currentPage === 'landing' || currentPage === 'landing-contact'
			? currentPage
			: 'landing');
		}

		if ($$self.$$.dirty & /*currentPage*/ 8) {
			$$invalidate(0, isLandingPage = currentPage === 'landing' || currentPage === 'landing-contact');
		}
	};

	return [isLandingPage, $t, handleStartNowClick, currentPage];
}

class PublicNavbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { currentPage: 3 });
	}
}

export { Icon$1 as I, PublicNavbar as P };
//# sourceMappingURL=PublicNavbar-1f5397ba.js.map
